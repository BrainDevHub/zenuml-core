// Generated from java-escape by ANTLR 4.11.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,66,529,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,
2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,
11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,
2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,
40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,
2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,
55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,
7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,1,0,1,0,1,0,1,0,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,
1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,
1,10,1,10,1,11,1,11,4,11,203,8,11,11,11,12,11,204,1,12,1,12,1,12,1,13,1,
13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,
1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,
25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,
1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,
36,1,36,1,36,1,36,1,36,1,36,3,36,275,8,36,1,37,1,37,1,37,1,38,1,38,1,38,
1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,
311,8,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,
1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,45,1,45,1,
45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,
1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,378,8,50,1,51,1,51,1,51,
1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,
51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,406,8,51,1,52,1,52,5,52,
410,8,52,10,52,12,52,413,9,52,1,53,1,53,1,54,1,54,5,54,419,8,54,10,54,12,
54,422,9,54,1,55,4,55,425,8,55,11,55,12,55,426,1,56,4,56,430,8,56,11,56,
12,56,431,1,56,1,56,5,56,436,8,56,10,56,12,56,439,9,56,1,56,1,56,4,56,443,
8,56,11,56,12,56,444,3,56,447,8,56,1,57,1,57,1,57,1,57,5,57,453,8,57,10,
57,12,57,456,9,57,1,57,3,57,459,8,57,1,58,1,58,1,58,1,58,1,59,1,59,1,59,
1,59,5,59,469,8,59,10,59,12,59,472,9,59,1,59,1,59,1,59,1,59,1,60,1,60,1,
61,1,61,5,61,482,8,61,10,61,12,61,485,9,61,1,61,1,61,1,61,1,61,5,61,491,
8,61,10,61,12,61,494,9,61,1,62,1,62,5,62,498,8,62,10,62,12,62,501,9,62,1,
62,1,62,1,62,1,62,5,62,507,8,62,10,62,12,62,510,9,62,1,63,4,63,513,8,63,
11,63,12,63,514,1,64,1,64,1,64,1,64,1,65,4,65,522,8,65,11,65,12,65,523,1,
66,1,66,1,66,1,66,1,470,0,67,3,1,5,2,7,3,9,4,11,5,13,6,15,7,17,8,19,9,21,
10,23,0,25,11,27,12,29,13,31,14,33,15,35,16,37,17,39,18,41,19,43,20,45,21,
47,22,49,23,51,24,53,25,55,26,57,27,59,28,61,29,63,30,65,31,67,32,69,33,
71,34,73,35,75,36,77,37,79,38,81,39,83,40,85,41,87,42,89,43,91,44,93,45,
95,46,97,47,99,48,101,49,103,50,105,51,107,52,109,53,111,54,113,55,115,56,
117,57,119,58,121,59,123,60,125,61,127,62,129,63,131,64,133,65,135,66,3,
0,1,2,7,2,0,9,9,32,32,3,0,48,57,65,70,97,102,4,0,48,57,65,90,95,95,97,122,
3,0,65,90,95,95,97,122,1,0,48,57,3,0,10,10,13,13,34,34,2,0,10,10,13,13,552,
0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,25,1,0,0,0,0,27,
1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,
61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,
0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,
1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,
0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,
1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,
0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,
0,0,0,127,1,0,0,0,1,129,1,0,0,0,1,131,1,0,0,0,2,133,1,0,0,0,2,135,1,0,0,
0,3,137,1,0,0,0,5,141,1,0,0,0,7,149,1,0,0,0,9,160,1,0,0,0,11,169,1,0,0,0,
13,177,1,0,0,0,15,185,1,0,0,0,17,189,1,0,0,0,19,192,1,0,0,0,21,195,1,0,0,
0,23,198,1,0,0,0,25,200,1,0,0,0,27,206,1,0,0,0,29,209,1,0,0,0,31,212,1,0,
0,0,33,215,1,0,0,0,35,218,1,0,0,0,37,220,1,0,0,0,39,222,1,0,0,0,41,225,1,
0,0,0,43,228,1,0,0,0,45,230,1,0,0,0,47,232,1,0,0,0,49,234,1,0,0,0,51,236,
1,0,0,0,53,238,1,0,0,0,55,240,1,0,0,0,57,242,1,0,0,0,59,244,1,0,0,0,61,246,
1,0,0,0,63,248,1,0,0,0,65,250,1,0,0,0,67,252,1,0,0,0,69,254,1,0,0,0,71,256,
1,0,0,0,73,261,1,0,0,0,75,274,1,0,0,0,77,276,1,0,0,0,79,279,1,0,0,0,81,310,
1,0,0,0,83,312,1,0,0,0,85,319,1,0,0,0,87,323,1,0,0,0,89,327,1,0,0,0,91,333,
1,0,0,0,93,337,1,0,0,0,95,340,1,0,0,0,97,344,1,0,0,0,99,350,1,0,0,0,101,
358,1,0,0,0,103,377,1,0,0,0,105,405,1,0,0,0,107,407,1,0,0,0,109,414,1,0,
0,0,111,416,1,0,0,0,113,424,1,0,0,0,115,446,1,0,0,0,117,448,1,0,0,0,119,
460,1,0,0,0,121,464,1,0,0,0,123,477,1,0,0,0,125,479,1,0,0,0,127,495,1,0,
0,0,129,512,1,0,0,0,131,516,1,0,0,0,133,521,1,0,0,0,135,525,1,0,0,0,137,
138,7,0,0,0,138,139,1,0,0,0,139,140,6,0,0,0,140,4,1,0,0,0,141,142,5,99,0,
0,142,143,5,111,0,0,143,144,5,110,0,0,144,145,5,115,0,0,145,146,5,116,0,
0,146,147,1,0,0,0,147,148,6,1,1,0,148,6,1,0,0,0,149,150,5,114,0,0,150,151,
5,101,0,0,151,152,5,97,0,0,152,153,5,100,0,0,153,154,5,111,0,0,154,155,5,
110,0,0,155,156,5,108,0,0,156,157,5,121,0,0,157,158,1,0,0,0,158,159,6,2,
1,0,159,8,1,0,0,0,160,161,5,115,0,0,161,162,5,116,0,0,162,163,5,97,0,0,163,
164,5,116,0,0,164,165,5,105,0,0,165,166,5,99,0,0,166,167,1,0,0,0,167,168,
6,3,1,0,168,10,1,0,0,0,169,170,5,97,0,0,170,171,5,119,0,0,171,172,5,97,0,
0,172,173,5,105,0,0,173,174,5,116,0,0,174,175,1,0,0,0,175,176,6,4,1,0,176,
12,1,0,0,0,177,178,5,116,0,0,178,179,5,105,0,0,179,180,5,116,0,0,180,181,
5,108,0,0,181,182,5,101,0,0,182,183,1,0,0,0,183,184,6,5,2,0,184,14,1,0,0,
0,185,186,5,58,0,0,186,187,1,0,0,0,187,188,6,6,3,0,188,16,1,0,0,0,189,190,
5,60,0,0,190,191,5,60,0,0,191,18,1,0,0,0,192,193,5,62,0,0,193,194,5,62,0,
0,194,20,1,0,0,0,195,196,5,45,0,0,196,197,5,62,0,0,197,22,1,0,0,0,198,199,
7,1,0,0,199,24,1,0,0,0,200,202,5,35,0,0,201,203,3,23,10,0,202,201,1,0,0,
0,203,204,1,0,0,0,204,202,1,0,0,0,204,205,1,0,0,0,205,26,1,0,0,0,206,207,
5,124,0,0,207,208,5,124,0,0,208,28,1,0,0,0,209,210,5,38,0,0,210,211,5,38,
0,0,211,30,1,0,0,0,212,213,5,61,0,0,213,214,5,61,0,0,214,32,1,0,0,0,215,
216,5,33,0,0,216,217,5,61,0,0,217,34,1,0,0,0,218,219,5,62,0,0,219,36,1,0,
0,0,220,221,5,60,0,0,221,38,1,0,0,0,222,223,5,62,0,0,223,224,5,61,0,0,224,
40,1,0,0,0,225,226,5,60,0,0,226,227,5,61,0,0,227,42,1,0,0,0,228,229,5,43,
0,0,229,44,1,0,0,0,230,231,5,45,0,0,231,46,1,0,0,0,232,233,5,42,0,0,233,
48,1,0,0,0,234,235,5,47,0,0,235,50,1,0,0,0,236,237,5,37,0,0,237,52,1,0,0,
0,238,239,5,94,0,0,239,54,1,0,0,0,240,241,5,33,0,0,241,56,1,0,0,0,242,243,
5,59,0,0,243,58,1,0,0,0,244,245,5,44,0,0,245,60,1,0,0,0,246,247,5,61,0,0,
247,62,1,0,0,0,248,249,5,40,0,0,249,64,1,0,0,0,250,251,5,41,0,0,251,66,1,
0,0,0,252,253,5,123,0,0,253,68,1,0,0,0,254,255,5,125,0,0,255,70,1,0,0,0,
256,257,5,116,0,0,257,258,5,114,0,0,258,259,5,117,0,0,259,260,5,101,0,0,
260,72,1,0,0,0,261,262,5,102,0,0,262,263,5,97,0,0,263,264,5,108,0,0,264,
265,5,115,0,0,265,266,5,101,0,0,266,74,1,0,0,0,267,268,5,110,0,0,268,269,
5,105,0,0,269,275,5,108,0,0,270,271,5,110,0,0,271,272,5,117,0,0,272,273,
5,108,0,0,273,275,5,108,0,0,274,267,1,0,0,0,274,270,1,0,0,0,275,76,1,0,0,
0,276,277,5,105,0,0,277,278,5,102,0,0,278,78,1,0,0,0,279,280,5,101,0,0,280,
281,5,108,0,0,281,282,5,115,0,0,282,283,5,101,0,0,283,80,1,0,0,0,284,285,
5,119,0,0,285,286,5,104,0,0,286,287,5,105,0,0,287,288,5,108,0,0,288,311,
5,101,0,0,289,290,5,102,0,0,290,291,5,111,0,0,291,311,5,114,0,0,292,293,
5,102,0,0,293,294,5,111,0,0,294,295,5,114,0,0,295,296,5,101,0,0,296,297,
5,97,0,0,297,298,5,99,0,0,298,311,5,104,0,0,299,300,5,102,0,0,300,301,5,
111,0,0,301,302,5,114,0,0,302,303,5,69,0,0,303,304,5,97,0,0,304,305,5,99,
0,0,305,311,5,104,0,0,306,307,5,108,0,0,307,308,5,111,0,0,308,309,5,111,
0,0,309,311,5,112,0,0,310,284,1,0,0,0,310,289,1,0,0,0,310,292,1,0,0,0,310,
299,1,0,0,0,310,306,1,0,0,0,311,82,1,0,0,0,312,313,5,114,0,0,313,314,5,101,
0,0,314,315,5,116,0,0,315,316,5,117,0,0,316,317,5,114,0,0,317,318,5,110,
0,0,318,84,1,0,0,0,319,320,5,110,0,0,320,321,5,101,0,0,321,322,5,119,0,0,
322,86,1,0,0,0,323,324,5,112,0,0,324,325,5,97,0,0,325,326,5,114,0,0,326,
88,1,0,0,0,327,328,5,103,0,0,328,329,5,114,0,0,329,330,5,111,0,0,330,331,
5,117,0,0,331,332,5,112,0,0,332,90,1,0,0,0,333,334,5,111,0,0,334,335,5,112,
0,0,335,336,5,116,0,0,336,92,1,0,0,0,337,338,5,97,0,0,338,339,5,115,0,0,
339,94,1,0,0,0,340,341,5,116,0,0,341,342,5,114,0,0,342,343,5,121,0,0,343,
96,1,0,0,0,344,345,5,99,0,0,345,346,5,97,0,0,346,347,5,116,0,0,347,348,5,
99,0,0,348,349,5,104,0,0,349,98,1,0,0,0,350,351,5,102,0,0,351,352,5,105,
0,0,352,353,5,110,0,0,353,354,5,97,0,0,354,355,5,108,0,0,355,356,5,108,0,
0,356,357,5,121,0,0,357,100,1,0,0,0,358,359,5,105,0,0,359,360,5,110,0,0,
360,102,1,0,0,0,361,362,5,64,0,0,362,363,5,83,0,0,363,364,5,116,0,0,364,
365,5,97,0,0,365,366,5,114,0,0,366,367,5,116,0,0,367,368,5,101,0,0,368,378,
5,114,0,0,369,370,5,64,0,0,370,371,5,115,0,0,371,372,5,116,0,0,372,373,5,
97,0,0,373,374,5,114,0,0,374,375,5,116,0,0,375,376,5,101,0,0,376,378,5,114,
0,0,377,361,1,0,0,0,377,369,1,0,0,0,378,104,1,0,0,0,379,380,5,64,0,0,380,
381,5,82,0,0,381,382,5,101,0,0,382,383,5,116,0,0,383,384,5,117,0,0,384,385,
5,114,0,0,385,406,5,110,0,0,386,387,5,64,0,0,387,388,5,114,0,0,388,389,5,
101,0,0,389,390,5,116,0,0,390,391,5,117,0,0,391,392,5,114,0,0,392,406,5,
110,0,0,393,394,5,64,0,0,394,395,5,82,0,0,395,396,5,101,0,0,396,397,5,112,
0,0,397,398,5,108,0,0,398,406,5,121,0,0,399,400,5,64,0,0,400,401,5,114,0,
0,401,402,5,101,0,0,402,403,5,112,0,0,403,404,5,108,0,0,404,406,5,121,0,
0,405,379,1,0,0,0,405,386,1,0,0,0,405,393,1,0,0,0,405,399,1,0,0,0,406,106,
1,0,0,0,407,411,5,64,0,0,408,410,7,2,0,0,409,408,1,0,0,0,410,413,1,0,0,0,
411,409,1,0,0,0,411,412,1,0,0,0,412,108,1,0,0,0,413,411,1,0,0,0,414,415,
5,46,0,0,415,110,1,0,0,0,416,420,7,3,0,0,417,419,7,2,0,0,418,417,1,0,0,0,
419,422,1,0,0,0,420,418,1,0,0,0,420,421,1,0,0,0,421,112,1,0,0,0,422,420,
1,0,0,0,423,425,7,4,0,0,424,423,1,0,0,0,425,426,1,0,0,0,426,424,1,0,0,0,
426,427,1,0,0,0,427,114,1,0,0,0,428,430,7,4,0,0,429,428,1,0,0,0,430,431,
1,0,0,0,431,429,1,0,0,0,431,432,1,0,0,0,432,433,1,0,0,0,433,437,5,46,0,0,
434,436,7,4,0,0,435,434,1,0,0,0,436,439,1,0,0,0,437,435,1,0,0,0,437,438,
1,0,0,0,438,447,1,0,0,0,439,437,1,0,0,0,440,442,5,46,0,0,441,443,7,4,0,0,
442,441,1,0,0,0,443,444,1,0,0,0,444,442,1,0,0,0,444,445,1,0,0,0,445,447,
1,0,0,0,446,429,1,0,0,0,446,440,1,0,0,0,447,116,1,0,0,0,448,454,5,34,0,0,
449,453,8,5,0,0,450,451,5,34,0,0,451,453,5,34,0,0,452,449,1,0,0,0,452,450,
1,0,0,0,453,456,1,0,0,0,454,452,1,0,0,0,454,455,1,0,0,0,455,458,1,0,0,0,
456,454,1,0,0,0,457,459,7,5,0,0,458,457,1,0,0,0,458,459,1,0,0,0,459,118,
1,0,0,0,460,461,7,6,0,0,461,462,1,0,0,0,462,463,6,58,0,0,463,120,1,0,0,0,
464,465,5,47,0,0,465,466,5,47,0,0,466,470,1,0,0,0,467,469,9,0,0,0,468,467,
1,0,0,0,469,472,1,0,0,0,470,471,1,0,0,0,470,468,1,0,0,0,471,473,1,0,0,0,
472,470,1,0,0,0,473,474,5,10,0,0,474,475,1,0,0,0,475,476,6,59,4,0,476,122,
1,0,0,0,477,478,9,0,0,0,478,124,1,0,0,0,479,483,4,61,0,0,480,482,3,3,0,0,
481,480,1,0,0,0,482,485,1,0,0,0,483,481,1,0,0,0,483,484,1,0,0,0,484,486,
1,0,0,0,485,483,1,0,0,0,486,487,5,61,0,0,487,488,5,61,0,0,488,492,1,0,0,
0,489,491,8,6,0,0,490,489,1,0,0,0,491,494,1,0,0,0,492,490,1,0,0,0,492,493,
1,0,0,0,493,126,1,0,0,0,494,492,1,0,0,0,495,499,5,10,0,0,496,498,3,3,0,0,
497,496,1,0,0,0,498,501,1,0,0,0,499,497,1,0,0,0,499,500,1,0,0,0,500,502,
1,0,0,0,501,499,1,0,0,0,502,503,5,61,0,0,503,504,5,61,0,0,504,508,1,0,0,
0,505,507,8,6,0,0,506,505,1,0,0,0,507,510,1,0,0,0,508,506,1,0,0,0,508,509,
1,0,0,0,509,128,1,0,0,0,510,508,1,0,0,0,511,513,8,6,0,0,512,511,1,0,0,0,
513,514,1,0,0,0,514,512,1,0,0,0,514,515,1,0,0,0,515,130,1,0,0,0,516,517,
7,6,0,0,517,518,1,0,0,0,518,519,6,64,5,0,519,132,1,0,0,0,520,522,8,6,0,0,
521,520,1,0,0,0,522,523,1,0,0,0,523,521,1,0,0,0,523,524,1,0,0,0,524,134,
1,0,0,0,525,526,7,6,0,0,526,527,1,0,0,0,527,528,6,66,5,0,528,136,1,0,0,0,
25,0,1,2,204,274,310,377,405,411,420,426,431,437,444,446,452,454,458,470,
483,492,499,508,514,523,6,0,1,0,0,3,0,5,2,0,5,1,0,0,2,0,4,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class sequenceLexer extends antlr4.Lexer {

    static grammarFileName = "sequenceLexer.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN", "COMMENT_CHANNEL", 
                                                               "MODIFIER_CHANNEL" ];
	static modeNames = [ "DEFAULT_MODE", "EVENT", "TITLE_MODE" ];
	static literalNames = [ null, null, "'const'", "'readonly'", "'static'", 
                         "'await'", "'title'", "':'", "'<<'", "'>>'", "'->'", 
                         null, "'||'", "'&&'", "'=='", "'!='", "'>'", "'<'", 
                         "'>='", "'<='", "'+'", "'-'", "'*'", "'/'", "'%'", 
                         "'^'", "'!'", "';'", "','", "'='", "'('", "')'", 
                         "'{'", "'}'", "'true'", "'false'", null, "'if'", 
                         "'else'", null, "'return'", "'new'", "'par'", "'group'", 
                         "'opt'", "'as'", "'try'", "'catch'", "'finally'", 
                         "'in'", null, null, null, "'.'" ];
	static symbolicNames = [ null, "WS", "CONSTANT", "READONLY", "STATIC", 
                          "AWAIT", "TITLE", "COL", "SOPEN", "SCLOSE", "ARROW", 
                          "COLOR", "OR", "AND", "EQ", "NEQ", "GT", "LT", 
                          "GTEQ", "LTEQ", "PLUS", "MINUS", "MULT", "DIV", 
                          "MOD", "POW", "NOT", "SCOL", "COMMA", "ASSIGN", 
                          "OPAR", "CPAR", "OBRACE", "CBRACE", "TRUE", "FALSE", 
                          "NIL", "IF", "ELSE", "WHILE", "RETURN", "NEW", 
                          "PAR", "GROUP", "OPT", "AS", "TRY", "CATCH", "FINALLY", 
                          "IN", "STARTER_LXR", "ANNOTATION_RET", "ANNOTATION", 
                          "DOT", "ID", "INT", "FLOAT", "STRING", "CR", "COMMENT", 
                          "OTHER", "DIVIDER", "DIVIDER2", "EVENT_PAYLOAD_LXR", 
                          "EVENT_END", "TITLE_CONTENT", "TITLE_END" ];
	static ruleNames = [ "WS", "CONSTANT", "READONLY", "STATIC", "AWAIT", "TITLE", 
                      "COL", "SOPEN", "SCLOSE", "ARROW", "HEX", "COLOR", 
                      "OR", "AND", "EQ", "NEQ", "GT", "LT", "GTEQ", "LTEQ", 
                      "PLUS", "MINUS", "MULT", "DIV", "MOD", "POW", "NOT", 
                      "SCOL", "COMMA", "ASSIGN", "OPAR", "CPAR", "OBRACE", 
                      "CBRACE", "TRUE", "FALSE", "NIL", "IF", "ELSE", "WHILE", 
                      "RETURN", "NEW", "PAR", "GROUP", "OPT", "AS", "TRY", 
                      "CATCH", "FINALLY", "IN", "STARTER_LXR", "ANNOTATION_RET", 
                      "ANNOTATION", "DOT", "ID", "INT", "FLOAT", "STRING", 
                      "CR", "COMMENT", "OTHER", "DIVIDER", "DIVIDER2", "EVENT_PAYLOAD_LXR", 
                      "EVENT_END", "TITLE_CONTENT", "TITLE_END" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

sequenceLexer.EOF = antlr4.Token.EOF;
sequenceLexer.WS = 1;
sequenceLexer.CONSTANT = 2;
sequenceLexer.READONLY = 3;
sequenceLexer.STATIC = 4;
sequenceLexer.AWAIT = 5;
sequenceLexer.TITLE = 6;
sequenceLexer.COL = 7;
sequenceLexer.SOPEN = 8;
sequenceLexer.SCLOSE = 9;
sequenceLexer.ARROW = 10;
sequenceLexer.COLOR = 11;
sequenceLexer.OR = 12;
sequenceLexer.AND = 13;
sequenceLexer.EQ = 14;
sequenceLexer.NEQ = 15;
sequenceLexer.GT = 16;
sequenceLexer.LT = 17;
sequenceLexer.GTEQ = 18;
sequenceLexer.LTEQ = 19;
sequenceLexer.PLUS = 20;
sequenceLexer.MINUS = 21;
sequenceLexer.MULT = 22;
sequenceLexer.DIV = 23;
sequenceLexer.MOD = 24;
sequenceLexer.POW = 25;
sequenceLexer.NOT = 26;
sequenceLexer.SCOL = 27;
sequenceLexer.COMMA = 28;
sequenceLexer.ASSIGN = 29;
sequenceLexer.OPAR = 30;
sequenceLexer.CPAR = 31;
sequenceLexer.OBRACE = 32;
sequenceLexer.CBRACE = 33;
sequenceLexer.TRUE = 34;
sequenceLexer.FALSE = 35;
sequenceLexer.NIL = 36;
sequenceLexer.IF = 37;
sequenceLexer.ELSE = 38;
sequenceLexer.WHILE = 39;
sequenceLexer.RETURN = 40;
sequenceLexer.NEW = 41;
sequenceLexer.PAR = 42;
sequenceLexer.GROUP = 43;
sequenceLexer.OPT = 44;
sequenceLexer.AS = 45;
sequenceLexer.TRY = 46;
sequenceLexer.CATCH = 47;
sequenceLexer.FINALLY = 48;
sequenceLexer.IN = 49;
sequenceLexer.STARTER_LXR = 50;
sequenceLexer.ANNOTATION_RET = 51;
sequenceLexer.ANNOTATION = 52;
sequenceLexer.DOT = 53;
sequenceLexer.ID = 54;
sequenceLexer.INT = 55;
sequenceLexer.FLOAT = 56;
sequenceLexer.STRING = 57;
sequenceLexer.CR = 58;
sequenceLexer.COMMENT = 59;
sequenceLexer.OTHER = 60;
sequenceLexer.DIVIDER = 61;
sequenceLexer.DIVIDER2 = 62;
sequenceLexer.EVENT_PAYLOAD_LXR = 63;
sequenceLexer.EVENT_END = 64;
sequenceLexer.TITLE_CONTENT = 65;
sequenceLexer.TITLE_END = 66;

sequenceLexer.COMMENT_CHANNEL = 2;
sequenceLexer.MODIFIER_CHANNEL = 3;

sequenceLexer.EVENT = 1;
sequenceLexer.TITLE_MODE = 2;


sequenceLexer.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch (ruleIndex) {
		case 61:
			return this.DIVIDER_sempred(localctx, predIndex);
    	default:
    		throw "No registered predicate for:" + ruleIndex;
    }
};

sequenceLexer.prototype.DIVIDER_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.column === 0;
		default:
			throw "No predicate with index:" + predIndex;
	}
};




